<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Calendar</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
    }

    .wrapper {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }

    .calendar {
      display: grid;
      grid-template-rows: auto 1fr;
      margin-top: 20px;
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .current-date {
      font-size: 1.5rem;
      font-weight: 600;
    }

    .total-bookings {
      font-size: 1rem;
      color: #555;
    }

    .icons {
      display: flex;
      gap: 10px;
    }

    .icons .material-icons-outlined {
      cursor: pointer;
      font-size: 28px;
      transition: transform 0.2s ease;
      color: #007bff;
    }

    .icons .material-icons-outlined:hover {
      transform: scale(1.2);
    }

    .weeks {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      text-align: center;
      font-weight: bold;
      margin-bottom: 5px;
    }

    .days {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 5px;
    }

    .days div {
      text-align: center;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      min-height: 60px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      background-color: white;
    }

    .days .empty {
      visibility: hidden;
      border: none;
    }

    .days div:hover {
      background-color: #f0f0f0;
      cursor: pointer;
    }

    .pending {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .past {
      background-color: #fff3cd;
      color: #856404;
      border: 1px solid #ffeeba;
    }

    .booking-count {
    background-color: #007bff;
    color: #fff;
    border-radius: 50%;
    width: 22px;
    height: 22px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    position: absolute;
    top: 1px;
    right: 5px;
    }

    @media (max-width: 768px) {
      .weeks,
      .days {
        grid-template-columns: repeat(7, minmax(30px, 1fr));
      }

      .days div {
        padding: 21px 8px;
        font-size: 0.8em;
        min-height: 50px;
      }
    }
  </style>
</head>
<body>
  <div class="wrapper">
    <%- include('./layouts/header') %>
    <header>
      <div>
        <p class="current-date"></p>
        <p class="total-bookings"></p>
      </div>
      <div class="icons">
        <span id="prev" class="material-icons-outlined">chevron_left</span>
        <span id="next" class="material-icons-outlined">chevron_right</span>
      </div>
    </header>
    <div class="calendar">
      <ul class="weeks" style="list-style: none;">
        <li>Sun</li>
        <li>Mon</li>
        <li>Tue</li>
        <li>Wed</li>
        <li>Thu</li>
        <li>Fri</li>
        <li>Sat</li>
      </ul>
      <div class="days"></div>
    </div>
  </div>

  <script>
    let monthOffset = 0;

    async function populateCalendar() {
      const daysContainer = document.querySelector('.days');
      daysContainer.innerHTML = '';

      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const baseDate = new Date();
      baseDate.setDate(1);
      baseDate.setMonth(baseDate.getMonth() + monthOffset);
      baseDate.setHours(0, 0, 0, 0);

      const currentDate = new Date(baseDate);
      const currentMonth = currentDate.getMonth();
      const currentYear = currentDate.getFullYear();
      const firstDay = new Date(currentYear, currentMonth, 1);
      const lastDay = new Date(currentYear, currentMonth + 1, 0);

      // EJS variable passed from the server
      const allBookings = <%- JSON.stringify(bookings) %>;

      const bookingMap = new Map();
      let totalBookings = 0;

      if (Array.isArray(allBookings)) {
        allBookings.forEach(booking => {
          // Explicitly create a UTC date object to prevent timezone issues
          const bookingDate = new Date(booking._id + 'T00:00:00Z');
          
          // Use UTC methods for consistent month and year comparison
          const bookingYear = bookingDate.getUTCFullYear();
          const bookingMonth = bookingDate.getUTCMonth();
          
          if (bookingYear === currentYear && bookingMonth === currentMonth) {
            const formattedDate = booking._id; // The _id is already in YYYY-MM-DD format
            bookingMap.set(formattedDate, booking.count || 0);
            totalBookings += booking.count || 0;
          }
        });
      }

      // Update UI with correct month and total bookings
      document.querySelector('.current-date').textContent = new Intl.DateTimeFormat('en-US', { month: 'long', year: 'numeric' }).format(currentDate);
      document.querySelector('.total-bookings').textContent = `Total Bookings: ${totalBookings}`;

      // Fill empty slots before the first day of the month
      for (let i = 0; i < firstDay.getDay(); i++) {
        const emptyDiv = document.createElement('div');
        emptyDiv.classList.add('empty');
        daysContainer.appendChild(emptyDiv);
      }

      // Populate days
      for (let day = 1; day <= lastDay.getDate(); day++) {
        const div = document.createElement('div');
        div.textContent = day;

        const dateString = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        if (bookingMap.has(dateString)) {
          const bookingCount = bookingMap.get(dateString);
          const span = document.createElement('span');
          span.classList.add('booking-count');
          span.textContent = bookingCount;
          div.appendChild(span);

          const bookingDate = new Date(dateString);
          bookingDate.setHours(0, 0, 0, 0);
          div.classList.add(bookingDate < today ? 'past' : 'pending');
        }

        daysContainer.appendChild(div);
      }
    }

    document.querySelector('#prev').addEventListener('click', () => {
      monthOffset = Math.max(-12, monthOffset - 1);
      populateCalendar();
    });

    document.querySelector('#next').addEventListener('click', () => {
      monthOffset = Math.min(12, monthOffset + 1);
      populateCalendar();
    });

    document.addEventListener("DOMContentLoaded", populateCalendar);
  </script>

</body>
</html>
